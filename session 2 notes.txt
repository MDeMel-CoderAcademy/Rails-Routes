first explain the rails file structure

HTTP requests explanation.

-> show image (tim downey book)

Whenever someone accesses a web site on the Internet, 
two computers communicate. One computer has a software program known as a browser, the other
computer has a software program known as a web server. 
The browser sends a request to the server 
and the server sends a response to the browser. 
The request contains the URI ( or ' site path ' ) that is being requested 
and information about the browser that is making the request.
The response contains the data that was requested (if it is available), information about the page, and information about the server.

-> show reference http structure image

request format
a. The first line contains the type of request, the name of the requested page and
the protocol that is being used.
b. Subsequent lines are the request headers. They contain information about the
browser and the request.
c. A blank line in the request indicates the end of the request headers
d. In a POST request, additional information can be included after the blank line

response format
a. The first line contains the protocol being used, the status code and a brief
description of the status.
b. Subsequent lines are the response headers. They contain information about the
server and the response.
c. A blank line in the response indicates the end of the response headers.
d. In a successful response, the content of the page will be sent after the blank line.


let's look at the request : which initiates your rails router.
https://www.aisangam.com/blog/http-request-message-format-well-explained/

-> explain content types (HTTP Headers)

These content types are expressed as Multipurpose Internet Mail Extensions [MIME] types

The basic structure of a MIME type is a general type,
the general type for text has several specific types, for plain text,
HTML text and style sheet text. These types are represented as text/plain, text/html
and text/css, respectively

The most common content type on the web is HTML text, represented as the
MIME type text/html.


using the render feature

- render a different view template
- render a view template from a different controller
- render mimetypes

layouts discusion ( casper intro )

-how to render a specific layout 
-how to render without a layout

-> routing segment

explain and show the evidence for rails default routing mechanism

https://edgeguides.rubyonrails.org/routing.html#connecting-urls-to-code
https://guides.rubyonrails.org/v2.3/routing.html

using ' resources ' keyword

some of these routing mechanisms make more sense when you learn models and databases 
so we will only cover the concepts that are relevant to your current knowlledge base.

-specifying which controller to use for the resource.
-restricting the routes created using ' only ' and ' except '

link_to -> path helper

explain non-resourseful routes

-naming routes (using :as )

match routing
- when you are using the match statement you have to define the method ( via: )
:to & :as

(wildcard segments)
what if we wanted all paths after /path-name/* => to route a specific action
match '*path' => redirect('/'), via: :get

controller namespacing


using redirect feature in routes
